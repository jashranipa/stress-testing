/*
//brute.cpp
//ANY BRUTE FORCE OR AC SOLUTION
#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
#define int ll
typedef unsigned long long ull;
typedef long double lld;
#define all(x) (x).begin(), (x).end()
#define MOD 1000000007
#define endl  '\n'
void fast_io()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

long long a[24]; 

void solve()
{
    long long n;
	cin>>n;
	long long sum2 = 0;
	for(long long i = 1;i<=2*n;i++){
		cin>>a[i];
		sum2+=a[i];
	}
	sort(a+1,a+1+2*n);
	long long sum=0;
	for(long long i = 1;i<=n;i++){
		sum+=a[i];
	}
	if(sum==sum2/2 && sum2%2==0) cout<<"-1";
	else for(long long i = 1;i<=2*n;i++) cout<<a[i]<<" ";
	cout<<endl;
    return;
}


/*
you can do this to write multiple brute force solve() functions here
*/
int32_t main()
{
    fast_io();
    ll testcases=1;ll cse = 0;
    // cin >> testcases;
    while (testcases--)
    {
        solve();
    }
    return 0;
}

*/



/*
//q1.cpp
#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
#define int ll
typedef unsigned long long ull;
typedef long double lld;
#define all(x) (x).begin(), (x).end()
#define MOD 1000000007
#define endl  '\n'
void fast_io()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}


long long a[24]; 

void solve()
{
  long long n;
	cin>>n;
	long long sum2 = 0;
	for(long long i = 1;i<=2*n;i++){
		cin>>a[i];
		sum2+=a[i];
	}
	sort(a+1,a+1+2*n);
	long long sum=0;
	for(long long i = 1;i<=n;i++){
		sum+=a[i];
	}
	if(sum==sum2/2) cout<<"-1";
	else for(long long i = 1;i<=2*n;i++) cout<<a[i]<<" ";
	cout<<endl;
    return;
}

int32_t main()
{
    fast_io();
    ll testcases=1;ll cse = 0;
    // cin >> testcases; 
    while (testcases--)
    {
        solve();
    }
    return 0;
}




*/



/*
//gen.cpp
// NOT USE THIS UNTILL VERY STUCK ON WHERE YOU GO WRONG !!! (first use your brain to make corner cases)
// for creating new type of tests you need to modify logic
// standard are in GFG(V.IMP)(Reading List)(see errichto video for details)

// generating a random sequence of DISTINCT elements
// ./gen 1 AND ./gen 2 AND SO ON.. to verify if testcases formed are correct
// also you can see on which testcase it gave wrong answer
#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
#define int ll
typedef unsigned long long ull;
typedef long double lld;
#define all(x) (x).begin(), (x).end()
#define MOD 1000000007
#define endl  '\n'

int rand(int a,int b) //Fn overloading to get rand. NO. in range [a,b] both included
{
    return a + rand()%(b-a+1);
} 
/*
int32_t main(int32_t argc, char *argv[])
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    srand(atoi(argv[1]));
    int n = rand(1,3); // set lower limit according to constraint and upper limit ko set as minimum as possible(to easily observe patterns)(if no WA on small n then gradually increase n)
    cout<<n<<endl;
    set<int>used; // this will vary question specific (as here we want distinct elements)(down code vary as per testcases)
    for(int i=0;i<2*n;i++)
    {
        int x;
        do
        {
            x = rand(1,10); // set lower limit according to constraint and upper limit ko set as minimum as possible(to easily observe patterns)(if no WA on small n then gradually increase n)
        } while (used.count(x));
        cout<<x<<endl;
        used.insert(x);
    }
    cout<<endl;

    return 0;
}
*/

/*
you can write multiple generater Fn here only
*/

 
//n , (2*n) random elements which can be same
int32_t main(int32_t argc, char* argv[]){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    srand(atoi(argv[1]));
    int n = rand(1, 2);
    cout<<n<<endl;
    for(int i=0;i<2*n;i++){
        int x = rand(1, 2);
        cout<<x<<" ";
    }
    cout<<endl;
}


*/



/*
//checker.cpp
//use this only when multiple answers are possible
// see 2 videos of Harry to understand ifstream and ofstream
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define int ll
typedef unsigned long long ull;
typedef long double lld;
#define all(x) (x).begin(), (x).end()
#define MOD 1000000007
#define endl  '\n'

//Trick fin,fout is same to same as cin,cout to any file(here we only need fin and so treat it same as cin,fin takes input from files)


int a[22];  // change datatype as per input
int b[22];  // change datatype as per input
int n;      // change datatype as per input
// return -1,-2,1
//function that takes output and write logic to check output satisfy certain condition.
int readAns(ifstream &fin){
    int ans; // change datatype as per output format
    fin>>ans;
    if(ans==-1)return ans;
    b[0] = ans;
    for(int i=1;i<2*n;i++)fin>>b[i];
    int s1 = 0, s2 = 0;
    for(int i=0;i<n;i++){
        s1+=b[i];
        s2+=b[i+n];
    }
    if(s1==s2)return -2;                // Sums are equal
    // sort(b,b+2*n);
    // for(int i=0;i<2*n;i++){
    //     if(a[i]!=b[i])return 0;         // Printing another array(no need of additional funtionality)
    // }
    return 1;                           // Correct answer
}
int32_t main(int32_t argc, char * argv[]){
    ifstream fin("input.txt", ifstream::in);
    ifstream fin1("out1.txt", ifstream::in);
    ifstream fin2("out2.txt", ifstream::in);
    fin>>n;                           //this line depends on question input
    for(int i=0;i<2*n;i++)fin>>a[i];  //this line depends on question input
    //sort(a,a+2*n);  // this is additional Functionality (not required)(to check with brute force)
    int myAnswer = readAns(fin1);     //fin1 only read out1.txt and fin2 reads out2.txt
    int correctAnswer = readAns(fin2);    // these 2 lines will remain same (and remaining code is very intuitive)
    if(myAnswer==-2){
        cout<<-1<<endl;
        return 0;
    }
    // if(myAnswer==0){
    //     cout<<"WA Printing another array"<<endl;
    //     return -1;
        
    // }
    else if(myAnswer == -1 && correctAnswer == 1){
        cout<<-1<<endl;
        return 0;
    }
    else
    {
        cout<<0<<endl;
    }
    return 0;
}
*/

# bash script
g++ -std=c++17 q1.cpp -o q1
g++ -std=c++17 brute.cpp -o brute #do not need sometimes when answer will come definitely
g++ -std=c++17 gen.cpp -o gen
g++ -std=c++17 checker.cpp -o checker
for((i=1; ; ++i))
do
    echo $i
    ./gen $i > "input.txt"
    ./q1 < "input.txt" > "out1.txt"
    ./brute < "input.txt" > "out2.txt"
    k=$(./checker)
    if [[ $k -eq -1 ]]; then
    break
    fi 
done
echo "Your input is:"
cat "input.txt"
echo "Your answer is:"
cat "out1.txt"
echo "Correct answer is:"
cat "out2.txt"
